# bot/handlers/support.py

import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from bot.utilities import get_text, back_button_markup
from bot.constants import SUPPORT_MENU
from bot.config import BACKEND_URL
from bot.handlers.main_menu import show_main_menu

async def handle_support(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    language = context.user_data.get('language', 'en')
    if language == 'en':
        text = "üõ† Please choose an option:"
        keyboard = [
            [InlineKeyboardButton("üìû Contact", callback_data='support_contact')],
            [InlineKeyboardButton("üí° Advice", callback_data='support_advice')],
            [InlineKeyboardButton("üîô Back", callback_data='back_to_main')],
        ]
    else:
        text = "üõ† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
        keyboard = [
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç", callback_data='support_contact')],
            [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data='support_advice')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    return SUPPORT_MENU

async def support_menu_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    choice = query.data
    language = context.user_data.get('language', 'en')
    if choice == 'support_contact':
        # Provide contact information
        response = requests.get(f'{BACKEND_URL}support/')
        if response.status_code == 200:
            support_info = response.json()
            email = support_info.get('email', 'N/A')
            phone = support_info.get('phone', 'N/A')
            working_hours = support_info.get('working_hours', 'N/A')
            if language == 'en':
                support_text = (
                    f"üõ† *Support Contact*:\n"
                    f"üìß Email: {email}\n"
                    f"üìû Phone: {phone}\n"
                    f"‚è∞ Working Hours: {working_hours}"
                )
            else:
                support_text = (
                    f"üõ† *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n"
                    f"üìß Email: {email}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"‚è∞ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {working_hours}"
                )
            await query.message.edit_text(support_text, parse_mode='Markdown',
                                          reply_markup=back_button_markup('back_to_support', context))
        else:
            if language == 'en':
                text = f"‚ùå Error retrieving support information. Response code: {response.status_code}"
            else:
                text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}"
            await query.message.edit_text(text, reply_markup=back_button_markup('back_to_support', context))
        return SUPPORT_MENU  # Stay in support menu
    elif choice == 'support_advice':
        # Fetch advice from backend
        response = requests.get(f'{BACKEND_URL}advice/')
        if response.status_code == 200:
            advice_list = response.json()
            advice_text = ""
            if advice_list:
                for advice in advice_list:
                    title = advice.get('title', 'Advice')
                    content = advice.get('content', 'No advice available at the moment.')
                    advice_text += f"üí° *{title}*\n\n{content}\n\n"
            else:
                if language == 'en':
                    advice_text = "No advice available at the moment."
                else:
                    advice_text = "–°–æ–≤–µ—Ç—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
            await query.message.edit_text(advice_text.strip(), parse_mode='Markdown',
                                          reply_markup=back_button_markup('back_to_support', context))
        else:
            if language == 'en':
                text = f"‚ùå Error retrieving advice. Response code: {response.status_code}"
            else:
                text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–æ–≤. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}"
            await query.message.edit_text(text, reply_markup=back_button_markup('back_to_support', context))
        return SUPPORT_MENU  # Stay in support menu
    elif choice == 'back_to_main':
        await show_main_menu(update, context)
        return ConversationHandler.END
    elif choice == 'back_to_support':
        return await handle_support(update, context)
    else:
        # Unrecognized input
        return SUPPORT_MENU
