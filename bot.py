import requests
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Contact,
)
from telegram.helpers import escape_markdown

from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    CallbackContext,
)

TELEGRAM_BOT_TOKEN = '7901466690:AAFtUArAc1ELvSbdDL53SlgnZ1mUIPvHRgQ'

BACKEND_URL = 'http://127.0.0.1:8000/subscription/'  # Backend URL

application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# Define conversation states
(
    BUY_SUBSCRIPTION_EMAIL,
    BUY_SUBSCRIPTION_PLAN,
    BUY_SUBSCRIPTION_PAYMENT_METHOD,
    BUY_SUBSCRIPTION_PAYMENT_DETAILS,
    GIFT_SUBSCRIPTION_CONTACT,
    GIFT_SUBSCRIPTION_PLAN,
    GIFT_SUBSCRIPTION_PAYMENT_METHOD,
    GIFT_SUBSCRIPTION_PAYMENT_DETAILS,
    FEEDBACK_MESSAGE,
) = range(9)


def register_user(user_id, username):
    response = requests.post(f'{BACKEND_URL}register/', json={"user_id": user_id, "username": username})
    if response.status_code == 201:
        return "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ"
    elif response.status_code == 200:
        return "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úîÔ∏è"
    else:
        return "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. ‚ùå"


async def start(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    username = update.message.chat.username or ''
    registration_status = register_user(user_id, username)

    keyboard = [[KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(f'{registration_status}', reply_markup=reply_markup)


async def send_documents(update: Update, context: CallbackContext):
    agreement_text = """
*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ*:
1. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
2. –í—ã –æ–±—è–∑—É–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –∏ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

*–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*:
1. –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª—è—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.
2. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.
    """

    await update.message.reply_text(agreement_text, parse_mode='Markdown')
    keyboard = [[KeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
        reply_markup=reply_markup)


async def consent_callback(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    try:
        response = requests.post(f'{BACKEND_URL}consent/', json={"user_id": user_id, "consent_given": True})
        if response.status_code == 201:
            await update.message.reply_text('‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!', reply_markup=main_menu_markup())
        else:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}')


def main_menu_markup():
    keyboard = [
        [KeyboardButton("üíº –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ–±–µ")],
        [KeyboardButton("üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–¥—É–∫—Ç–µ")],
        [KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton("üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üë§ –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def main_menu_handler(update: Update, context: CallbackContext):
    message = update.message.text
    if message == 'üíº –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ–±–µ':
        return await handle_buy_subscription_entry(update, context)
    elif message == 'üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        return await handle_gift_subscription_entry(update, context)
    elif message == '‚ÑπÔ∏è –û –ø—Ä–æ–¥—É–∫—Ç–µ':
        await handle_about_product(update, context)
    elif message == 'üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await handle_support(update, context)
    elif message == 'üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await handle_statistics(update, context)
    elif message == 'üë§ –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å':
        await handle_profile(update, context)
    elif message == 'üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        return await handle_feedback_entry(update, context)


# Subscription purchase conversation
async def handle_buy_subscription_entry(update: Update, context: CallbackContext):
    await update.message.reply_text('‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞:')
    return BUY_SUBSCRIPTION_EMAIL


async def handle_buy_subscription_email(update: Update, context: CallbackContext):
    email = update.message.text
    context.user_data['email'] = email
    await update.message.reply_text(f'–í–∞—à email {email} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:',
                                    reply_markup=subscription_plan_markup())
    return BUY_SUBSCRIPTION_PLAN


def subscription_plan_markup():
    keyboard = [
        [KeyboardButton("üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton("üìÜ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


async def handle_buy_subscription_plan(update: Update, context: CallbackContext):
    plan = update.message.text
    if plan == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup())
        return ConversationHandler.END
    context.user_data['plan'] = plan
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:', reply_markup=payment_method_markup())
    return BUY_SUBSCRIPTION_PAYMENT_METHOD


def payment_method_markup():
    keyboard = [
        [KeyboardButton("üí≥ –ö–∞—Ä—Ç–æ–π")],
        [KeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


async def handle_buy_subscription_payment_method(update: Update, context: CallbackContext):
    payment_method = update.message.text
    if payment_method == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω–æ–≤–∞:', reply_markup=subscription_plan_markup())
        return BUY_SUBSCRIPTION_PLAN
    context.user_data['payment_method'] = payment_method
    if payment_method == 'üí≥ –ö–∞—Ä—Ç–æ–π':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:')
    elif payment_method == '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å:')
    return BUY_SUBSCRIPTION_PAYMENT_DETAILS


async def handle_buy_subscription_payment_details(update: Update, context: CallbackContext):
    payment_method = context.user_data['payment_method']
    if payment_method == 'üí≥ –ö–∞—Ä—Ç–æ–π':
        context.user_data['card_number'] = update.message.text
    elif payment_method == '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π':
        context.user_data['crypto_address'] = update.message.text
    await process_payment(update, context)
    await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup())
    return ConversationHandler.END


async def process_payment(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    plan = context.user_data['plan']
    email = context.user_data['email']
    payment_method = context.user_data['payment_method']

    # Map plan names to backend expected values
    plan_mapping = {
        "üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞": "monthly",
        "üìÜ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞": "yearly"
    }
    plan_value = plan_mapping.get(plan, "")

    payment_data = {
        "user_id": user_id,
        "plan": plan_value,
        "email": email,
        "payment_method": payment_method,
        "amount": "10.00" if plan_value == "monthly" else "100.00"  # Example amounts
    }

    if payment_method == 'üí≥ –ö–∞—Ä—Ç–æ–π':
        payment_data["card_number"] = context.user_data['card_number']
    elif payment_method == '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π':
        payment_data["crypto_address"] = context.user_data['crypto_address']

    try:
        # First, make the payment
        response = requests.post(f'{BACKEND_URL}payment/', json=payment_data)
        if response.status_code == 201:
            await update.message.reply_text('‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
            # Then, activate the subscription
            subscription_response = requests.post(f'{BACKEND_URL}subscription/', json={
                "user_id": user_id,
                "plan": plan_value,
                "email": email
            })
            if subscription_response.status_code == 201:
                await update.message.reply_text('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.')
            else:
                await update.message.reply_text(
                    f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {subscription_response.status_code}')
        else:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}')


# Gift subscription conversation (Modified to accept contact)
async def handle_gift_subscription_entry(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)], [KeyboardButton("üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return GIFT_SUBSCRIPTION_CONTACT


async def handle_gift_subscription_contact(update: Update, context: CallbackContext):
    if update.message.contact:
        recipient_contact = update.message.contact
        recipient_user_id = recipient_contact.user_id
        recipient_first_name = recipient_contact.first_name
        recipient_last_name = recipient_contact.last_name
        if recipient_user_id:
            context.user_data['recipient_user_id'] = recipient_user_id
            context.user_data['recipient_first_name'] = recipient_first_name
            context.user_data['recipient_last_name'] = recipient_last_name
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:', reply_markup=subscription_plan_markup())
            return GIFT_SUBSCRIPTION_PLAN
        else:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return GIFT_SUBSCRIPTION_CONTACT
    elif update.message.text == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup())
        return ConversationHandler.END
    else:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.')
        return GIFT_SUBSCRIPTION_CONTACT


async def handle_gift_subscription_plan(update: Update, context: CallbackContext):
    plan = update.message.text
    if plan == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup())
        return ConversationHandler.END
    context.user_data['plan'] = plan
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:', reply_markup=payment_method_markup())
    return GIFT_SUBSCRIPTION_PAYMENT_METHOD


async def handle_gift_subscription_payment_method(update: Update, context: CallbackContext):
    payment_method = update.message.text
    if payment_method == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω–æ–≤–∞:', reply_markup=subscription_plan_markup())
        return GIFT_SUBSCRIPTION_PLAN
    context.user_data['payment_method'] = payment_method
    if payment_method == 'üí≥ –ö–∞—Ä—Ç–æ–π':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:')
    elif payment_method == '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å:')
    return GIFT_SUBSCRIPTION_PAYMENT_DETAILS


async def handle_gift_subscription_payment_details(update: Update, context: CallbackContext):
    payment_method = context.user_data['payment_method']
    if payment_method == 'üí≥ –ö–∞—Ä—Ç–æ–π':
        context.user_data['card_number'] = update.message.text
    elif payment_method == '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π':
        context.user_data['crypto_address'] = update.message.text
    await process_gift_payment(update, context)
    await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup())
    return ConversationHandler.END


async def process_gift_payment(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    recipient_user_id = context.user_data['recipient_user_id']
    recipient_first_name = context.user_data.get('recipient_first_name', '')
    recipient_last_name = context.user_data.get('recipient_last_name', '')
    plan = context.user_data['plan']
    payment_method = context.user_data['payment_method']

    # Map plan names to backend expected values
    plan_mapping = {
        "üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞": "monthly",
        "üìÜ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞": "yearly"
    }
    plan_value = plan_mapping.get(plan, "")

    payment_data = {
        "user_id": user_id,
        "amount": "10.00" if plan_value == "monthly" else "100.00",  # Example amounts
        "payment_method": payment_method,
    }

    if payment_method == 'üí≥ –ö–∞—Ä—Ç–æ–π':
        payment_data["card_number"] = context.user_data['card_number']
    elif payment_method == '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π':
        payment_data["crypto_address"] = context.user_data['crypto_address']

    try:
        # Make the payment
        response = requests.post(f'{BACKEND_URL}payment/', json=payment_data)
        if response.status_code == 201:
            await update.message.reply_text('‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
            # Gift the subscription
            gift_data = {
                "user_id": user_id,
                "recipient_id": recipient_user_id,
                "recipient_first_name": recipient_first_name,
                "recipient_last_name": recipient_last_name,
                "plan": plan_value
            }
            gift_response = requests.post(f'{BACKEND_URL}gift-subscription/', json=gift_data)
            if gift_response.status_code == 201:
                await update.message.reply_text(f'üéÅ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')
            else:
                await update.message.reply_text(
                    f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∞—Ä–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {gift_response.status_code}')
        else:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}')


# Feedback conversation
async def handle_feedback_entry(update: Update, context: CallbackContext):
    await update.message.reply_text('üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:')
    return FEEDBACK_MESSAGE


async def handle_feedback_message(update: Update, context: CallbackContext):
    feedback = update.message.text
    user_id = update.message.chat_id

    try:
        response = requests.post(f'{BACKEND_URL}feedback/', json={"user_id": user_id, "message": feedback})
        if response.status_code == 201:
            await update.message.reply_text('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!')
        else:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}')
    return ConversationHandler.END


async def handle_profile(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    response = requests.get(f'{BACKEND_URL}user-profile/{user_id}/')
    if response.status_code == 200:
        profile = response.json()
        subscriptions = profile.get('subscriptions', [])
        subscription_info = ''
        for sub in subscriptions:
            plan = sub.get('plan') or ''
            start_date = (sub.get('start_date') or '')[:10]  # Format date as YYYY-MM-DD
            end_date = (sub.get('end_date') or '')[:10]
            # Escape special characters
            plan = escape_markdown(plan.capitalize(), version=2)
            start_date = escape_markdown(start_date, version=2)
            end_date = escape_markdown(end_date, version=2)
            subscription_info += f"\n‚Ä¢ –ü–ª–∞–Ω: {plan}, —Å {start_date} –ø–æ {end_date}"
        name = profile.get('name') or ''
        name = escape_markdown(name, version=2)
        username = profile.get('username') or ''
        username = escape_markdown(username, version=2)
        subscription_info = escape_markdown(subscription_info if subscription_info else ' –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.',
                                            version=2)
        await update.message.reply_text(
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å*:\n–ò–º—è: {name}\nUsername: {username}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∏:{subscription_info}",
            parse_mode='MarkdownV2'
        )
    else:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.')


# Support handler
async def handle_support(update: Update, context: CallbackContext):
    response = requests.get(f'{BACKEND_URL}support/')
    if response.status_code == 200:
        support_info = response.json()
        email = support_info.get('email', 'N/A')
        phone = support_info.get('phone', 'N/A')
        working_hours = support_info.get('working_hours', 'N/A')
        support_text = (
            f"üõ† *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*:\n"
            f"üìß Email: {email}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {working_hours}"
        )
        await update.message.reply_text(support_text, parse_mode='Markdown')
    else:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')


async def handle_statistics(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    response = requests.get(f'{BACKEND_URL}statistics/{user_id}/')
    if response.status_code == 200:
        stats = response.json()
        total_payments = stats.get('total_payments') or '0.00'
        subscription_count = stats.get('subscription_count') or '0'
        last_payment_date = stats.get('last_payment_date') or 'N/A'
        # Escape data
        total_payments = escape_markdown(str(total_payments), version=2)
        subscription_count = escape_markdown(str(subscription_count), version=2)
        last_payment_date = escape_markdown(str(last_payment_date), version=2)
        await update.message.reply_text(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*:\n\n–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç: {total_payments}\n"
            f"–ß–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å–æ–∫: {subscription_count}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞: {last_payment_date}",
            parse_mode='MarkdownV2'
        )
    elif response.status_code == 404:
        await update.message.reply_text('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π.')
    else:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')


# About product handler
async def handle_about_product(update: Update, context: CallbackContext):
    response = requests.get(f'{BACKEND_URL}about/')
    if response.status_code == 200:
        product_info = response.json()
        await update.message.reply_text(
            f"üõç *–ù–∞–∑–≤–∞–Ω–∏–µ*: {product_info['name']}\nüíµ *–¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü*: {product_info['price_monthly']}\nüí≥ *–¶–µ–Ω–∞ –∑–∞ –≥–æ–¥*: {product_info['price_yearly']}\n\n{product_info['description']}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')


# Handlers for the conversation flows
buy_subscription_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('^üíº –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ–±–µ$'), handle_buy_subscription_entry)],
    states={
        BUY_SUBSCRIPTION_EMAIL: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_buy_subscription_email)],
        BUY_SUBSCRIPTION_PLAN: [MessageHandler(filters.Regex('^(üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞|üìÜ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞|üîô –ù–∞–∑–∞–¥)$'),
                                               handle_buy_subscription_plan)],
        BUY_SUBSCRIPTION_PAYMENT_METHOD: [MessageHandler(filters.Regex('^(üí≥ –ö–∞—Ä—Ç–æ–π|‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π|üîô –ù–∞–∑–∞–¥)$'),
                                                         handle_buy_subscription_payment_method)],
        BUY_SUBSCRIPTION_PAYMENT_DETAILS: [
            MessageHandler(filters.TEXT & (~filters.COMMAND), handle_buy_subscription_payment_details)],
    },
    fallbacks=[MessageHandler(filters.Regex('^üîô –ù–∞–∑–∞–¥$'), main_menu_handler)],
)

gift_subscription_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('^üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É$'), handle_gift_subscription_entry)],
    states={
        GIFT_SUBSCRIPTION_CONTACT: [MessageHandler((filters.CONTACT | filters.Regex('^üîô –ù–∞–∑–∞–¥$')) & (~filters.COMMAND),
                                                   handle_gift_subscription_contact)],
        GIFT_SUBSCRIPTION_PLAN: [MessageHandler(filters.Regex('^(üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞|üìÜ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞|üîô –ù–∞–∑–∞–¥)$'),
                                                handle_gift_subscription_plan)],
        GIFT_SUBSCRIPTION_PAYMENT_METHOD: [MessageHandler(filters.Regex('^(üí≥ –ö–∞—Ä—Ç–æ–π|‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π|üîô –ù–∞–∑–∞–¥)$'),
                                                          handle_gift_subscription_payment_method)],
        GIFT_SUBSCRIPTION_PAYMENT_DETAILS: [
            MessageHandler(filters.TEXT & (~filters.COMMAND), handle_gift_subscription_payment_details)],
    },
    fallbacks=[MessageHandler(filters.Regex('^üîô –ù–∞–∑–∞–¥$'), main_menu_handler)],
)

feedback_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('^üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$'), handle_feedback_entry)],
    states={
        FEEDBACK_MESSAGE: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_feedback_message)],
    },
    fallbacks=[MessageHandler(filters.Regex('^üîô –ù–∞–∑–∞–¥$'), main_menu_handler)],
)

# Add handlers to the application
application.add_handler(CommandHandler('start', start))
application.add_handler(MessageHandler(filters.Regex('^üöÄ –ù–∞—á–∞—Ç—å$'), send_documents))
application.add_handler(MessageHandler(filters.Regex('^‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω$'), consent_callback))
application.add_handler(
    MessageHandler(filters.Regex('^(‚ÑπÔ∏è –û –ø—Ä–æ–¥—É–∫—Ç–µ|üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞|üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üë§ –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å)$'), main_menu_handler))

# Add conversation handlers
application.add_handler(buy_subscription_conv_handler)
application.add_handler(gift_subscription_conv_handler)
application.add_handler(feedback_conv_handler)

if __name__ == '__main__':
    application.run_polling()
