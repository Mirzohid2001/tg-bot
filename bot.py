import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

TELEGRAM_BOT_TOKEN = '7901466690:AAFtUArAc1ELvSbdDL53SlgnZ1mUIPvHRgQ'
BACKEND_URL = 'http://127.0.0.1:8000/subscription/'  # Backend URL

application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()


def register_user(user_id, username):
    response = requests.post(f'{BACKEND_URL}register/', json={"user_id": user_id, "username": username})
    if response.status_code == 201:
        return "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\\! üéâ"
    elif response.status_code == 200:
        return "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\\! ‚úîÔ∏è"
    else:
        return "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\\. ‚ùå"



async def start(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    username = update.message.chat.username
    registration_status = register_user(user_id, username)

    # Foydalanuvchiga boshlash tugmasi yuborish
    keyboard = [[KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(f'{registration_status}', reply_markup=reply_markup)


async def send_documents(update: Update, context: CallbackContext):
    agreement_text = """
    *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ*:
    1\\. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\\.
    2\\. –í—ã –æ–±—è–∑—É–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –∏ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\.

    *–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*:
    1\\. –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª—è—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞\\.
    2\\. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è\\.
    """

    await update.message.reply_text(agreement_text, parse_mode='MarkdownV2')
    keyboard = [[KeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
        reply_markup=reply_markup)


async def consent_callback(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    try:
        response = requests.post(f'{BACKEND_URL}consent/', json={"user_id": user_id, "consent_given": True})
        if response.status_code == 201:
            await update.message.reply_text('‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!', reply_markup=main_menu_markup())
        else:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}')


def main_menu_markup():
    keyboard = [
        [KeyboardButton("üíº –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ–±–µ")],
        [KeyboardButton("üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–¥—É–∫—Ç–µ")],
        [KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton("üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üë§ –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def main_menu_handler(update: Update, context: CallbackContext):
    message = update.message.text
    if message == 'üíº –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ–±–µ':
        await handle_buy_subscription(update, context)
    elif message == 'üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        await handle_gift_subscription(update, context)
    elif message == '‚ÑπÔ∏è –û –ø—Ä–æ–¥—É–∫—Ç–µ':
        await handle_about_product(update, context)
    elif message == 'üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await handle_support(update, context)
    elif message == 'üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await handle_statistics(update, context)
    elif message == 'üë§ –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å':
        await handle_profile(update, context)
    elif message == 'üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        await handle_feedback(update, context)



async def handle_buy_subscription(update: Update, context: CallbackContext):
    await update.message.reply_text('‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞:')
    context.user_data['next_step'] = 'email'


async def handle_email(update: Update, context: CallbackContext):
    if context.user_data.get('next_step') == 'email':
        email = update.message.text
        context.user_data['email'] = email
        context.user_data['next_step'] = 'choose_plan'
        await update.message.reply_text(f'–í–∞—à email {email} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:',
                                        reply_markup=subscription_plan_markup())


def subscription_plan_markup():
    keyboard = [
        [KeyboardButton("üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton("üìÜ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]  # Orqaga qaytish tugmasi
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


# To'lov usuli uchun klaviatura
def payment_method_markup():
    keyboard = [
        [KeyboardButton("üí≥ –ö–∞—Ä—Ç–æ–π")],
        [KeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]  # Orqaga qaytish tugmasi
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


# Obuna tanlash va to'lov usulini tanlash
async def handle_plan_selection(update: Update, context: CallbackContext):
    if context.user_data.get('next_step') == 'choose_plan':
        plan = update.message.text
        context.user_data['plan'] = plan
        context.user_data['next_step'] = 'choose_payment_method'
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:',
            reply_markup=payment_method_markup()
        )


# To'lov usulini tanlash va "–ù–∞–∑–∞–¥" tugmasini boshqarish
async def handle_payment_method(update: Update, context: CallbackContext):
    if context.user_data.get('next_step') == 'choose_payment_method':
        payment_method = update.message.text

        # Agar foydalanuvchi "–ù–∞–∑–∞–¥" ni tanlasa
        if payment_method == 'üîô –ù–∞–∑–∞–¥':
            context.user_data['next_step'] = 'choose_plan'
            await update.message.reply_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω–æ–≤–∞:',
                reply_markup=subscription_plan_markup()
            )
        else:
            context.user_data['payment_method'] = payment_method
            if payment_method == 'üí≥ –ö–∞—Ä—Ç–æ–π':
                context.user_data['next_step'] = 'enter_card_number'
                await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:')
            elif payment_method == '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π':
                context.user_data['next_step'] = 'enter_crypto_address'
                await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å:')


# Kartani yoki kripto manzilni kiritish va "–ù–∞–∑–∞–¥" tugmasi
async def handle_payment_details(update: Update, context: CallbackContext):
    if context.user_data.get('next_step') == 'enter_card_number':
        card_number = update.message.text
        context.user_data['card_number'] = card_number
        await process_payment(update, context)
    elif context.user_data.get('next_step') == 'enter_crypto_address':
        crypto_address = update.message.text
        context.user_data['crypto_address'] = crypto_address
        await process_payment(update, context)
    elif update.message.text == 'üîô –ù–∞–∑–∞–¥':
        context.user_data['next_step'] = 'choose_payment_method'
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:',
            reply_markup=payment_method_markup()
        )


# To'lovni amalga oshirish
async def process_payment(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    plan = context.user_data['plan']
    email = context.user_data['email']
    payment_method = context.user_data['payment_method']

    payment_data = {
        "user_id": user_id,
        "plan": plan,
        "email": email,
        "payment_method": payment_method,
    }

    if payment_method == 'üí≥ –ö–∞—Ä—Ç–æ–π':
        payment_data["card_number"] = context.user_data['card_number']
    elif payment_method == '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π':
        payment_data["crypto_address"] = context.user_data['crypto_address']

    try:
        response = requests.post(f'{BACKEND_URL}payment/', json=payment_data)
        if response.status_code == 201:
            await update.message.reply_text('‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
            await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup())
        else:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}')


# Profil ma'lumotlarini olish
async def handle_profile(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    response = requests.get(f'{BACKEND_URL}user-profile/{user_id}/')
    if response.status_code == 200:
        profile = response.json()
        await update.message.reply_text(
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å*:\n–ò–º—è: {profile['name']}\nUsername: {profile['username']}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∏: {profile['subscriptions']}\n–ü–ª–∞—Ç–µ–∂–∏: {profile['payments']}",
            parse_mode='MarkdownV2'
        )
    else:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.')


async def handle_feedback(update: Update, context: CallbackContext):
    await update.message.reply_text('üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:')
    context.user_data['next_step'] = 'feedback'


async def handle_feedback_message(update: Update, context: CallbackContext):
    if context.user_data.get('next_step') == 'feedback':
        feedback = update.message.text
        user_id = update.message.chat_id

        try:
            response = requests.post(f'{BACKEND_URL}feedback/', json={"user_id": user_id, "message": feedback})
            if response.status_code == 201:
                await update.message.reply_text('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!')
            else:
                await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')
        except requests.exceptions.RequestException as e:
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}')


async def handle_support(update: Update, context: CallbackContext):
    response = requests.get(f'{BACKEND_URL}help/')
    if response.status_code == 200:
        help_sections = response.json()
        help_text = "\n\n".join([f"üõ† *{section['title']}*: {section['content']}" for section in help_sections])
        await update.message.reply_text(help_text, parse_mode='MarkdownV2')
    else:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')



async def handle_statistics(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    response = requests.get(f'{BACKEND_URL}statistics/{user_id}/')
    if response.status_code == 200:
        stats = response.json()
        await update.message.reply_text(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*:\n\n–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç: {stats['total_payments']}\n–ß–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å–æ–∫: {stats['subscription_count']}\n–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞: {stats['last_payment_date']}",
            parse_mode='MarkdownV2'
        )
    else:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.')


async def handle_about_product(update: Update, context: CallbackContext):
    response = requests.get(f'{BACKEND_URL}about/')
    if response.status_code == 200:
        product_info = response.json()
        await update.message.reply_text(
            f"üõç *–ù–∞–∑–≤–∞–Ω–∏–µ*: {product_info['name']}\nüíµ *–¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü*: {product_info['price_monthly']}\nüí≥ *–¶–µ–Ω–∞ –∑–∞ –≥–æ–¥*: {product_info['price_yearly']}",
            parse_mode='MarkdownV2'
        )
    else:
        await update.message.reply_text(
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')


async def handle_gift_subscription(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:")
    context.user_data['next_step'] = 'gift_subscription'


async def handle_gift_subscription_process(update: Update, context: CallbackContext):
    if context.user_data.get('next_step') == 'gift_subscription':
        gift_data = update.message.text.split(' ')
        if len(gift_data) == 2:
            recipient_id, plan = gift_data
            user_id = update.message.chat_id

            response = requests.post(f'{BACKEND_URL}gift-subscription/', json={
                "user_id": user_id,
                "recipient_id": recipient_id,
                "plan": plan
            })

            if response.status_code == 201:
                await update.message.reply_text(f'üéÅ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {recipient_id}')
            else:
                await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∞—Ä–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')
        else:
            await update.message.reply_text('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ ID –∏ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')


# Xandllerlar
application.add_handler(CommandHandler('start', start))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^(üöÄ –ù–∞—á–∞—Ç—å)$'), send_documents))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^(‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω)$'), consent_callback))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex(
    '^(üíº –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ–±–µ|üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É|‚ÑπÔ∏è –û –ø—Ä–æ–¥—É–∫—Ç–µ|üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞|üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üë§ –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å|üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤)$'),
                                       main_menu_handler))
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_email))
application.add_handler(
    MessageHandler(filters.TEXT & filters.Regex('^(üìÖ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞|üìÜ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)$'), handle_plan_selection))
application.add_handler(
    MessageHandler(filters.TEXT & filters.Regex('^(üí≥ –ö–∞—Ä—Ç–æ–π|‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π|üîô –ù–∞–∑–∞–¥)$'), handle_payment_method))
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_payment_details))
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_feedback_message))
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_gift_subscription_process))

if __name__ == '__main__':
    application.run_polling()
